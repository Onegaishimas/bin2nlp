# Docker Compose for bin2nlp Production Deployment
# Hybrid PostgreSQL + File Storage architecture
# 
# Environment Configuration:
# - Uses .env file for all configuration values
# - Container-specific overrides for deployment networking

version: '3.8'

services:
  # PostgreSQL database
  database:
    image: postgres:15-alpine
    container_name: bin2nlp-database
    environment:
      POSTGRES_DB: bin2nlp
      POSTGRES_USER: bin2nlp
      POSTGRES_PASSWORD: bin2nlp_password
      # Use MD5 authentication instead of SCRAM-SHA-256 for compatibility
      POSTGRES_PASSWORD_ENCRYPTION: md5
      # Allow connections from Docker network
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bin2nlp"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
      
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # Main API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: bin2nlp-api
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      # Container-specific overrides for deployment
      - DATABASE_HOST=database  # Override to use Docker service name
      - ENVIRONMENT=production  # Ensure production mode
      - SECURITY_REQUIRE_API_KEYS=false  # Disable auth in development
      
    volumes:
      # Persistent storage for temporary files, logs, and file storage
      - api_uploads:/tmp/uploads
      - api_logs:/var/log/app
      - api_data:/var/lib/app/data  # File-based storage directory
      
    depends_on:
      database:
        condition: service_healthy
        
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
      
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
      
  api_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind  
      device: ./data/uploads
      
  api_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/logs
      
  api_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/storage

# Use default Docker bridge network
networks:
  default:
    driver: bridge