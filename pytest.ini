[tool:pytest]
# Pytest configuration for bin2nlp project
# Test discovery and execution settings

# Minimum Python version
minversion = 6.0

# Test paths and patterns
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Add src to Python path for imports
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --color=yes
    --durations=10
    --showlocals
    -ra

# Test markers for categorization
markers =
    unit: Unit tests (fast, isolated, no external dependencies)
    integration: Integration tests (slower, may use external services)
    performance: Performance and benchmark tests
    slow: Tests that take a long time to run
    radare2: Tests that require radare2 installation
    api: API endpoint tests
    models: Data model tests
    security: Security-related tests
    smoke: Smoke tests for basic functionality
    
# Filtering configuration
filterwarnings =
    # Treat warnings as errors in tests
    error
    # Ignore specific warnings from dependencies
    ignore::PendingDeprecationWarning:pydantic.*
    ignore::UserWarning:structlog.*
    
# Coverage configuration (when using pytest-cov)
# Usage: pytest --cov=src --cov-report=html --cov-report=term-missing
# These settings work with pytest-cov plugin
[tool:coverage:run]
source = src
omit = 
    */tests/*
    */venv/*
    */env/*
    */.env/*
    */site-packages/*
    */__pycache__/*
    */migrations/*
    */alembic/*

[tool:coverage:report]
# Fail if coverage is below threshold
fail_under = 85
# Show missing lines
show_missing = true
# Skip files with no executable code
skip_empty = true
# Precision for coverage percentage
precision = 2

[tool:coverage:html]
directory = htmlcov
title = bin2nlp Test Coverage Report

[tool:coverage:xml]
output = coverage.xml

# Log configuration for tests
log_cli = false
log_cli_level = WARNING
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Auto-use fixtures
usefixtures = 
    
# Timeout configuration (requires pytest-timeout)
timeout = 300
timeout_method = thread

# Asyncio configuration (requires pytest-asyncio)
asyncio_mode = auto

# Parallel test execution (requires pytest-xdist)
# Usage: pytest -n auto  (automatically detect CPU count)
# Usage: pytest -n 4     (use 4 workers)

# Mock configuration
mock_use_standalone_module = true

# Temporary directory configuration
tmp_path_retention_count = 3
tmp_path_retention_policy = failed